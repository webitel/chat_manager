// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: config_service.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConfigService service

func NewConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "ConfigService.UpdateConfig",
			Path:    []string{"/logger/config/{config_id}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ConfigService.PatchConfig",
			Path:    []string{"/logger/config/{config_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ConfigService.CreateConfig",
			Path:    []string{"/logger/config"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ConfigService.DeleteConfig",
			Path:    []string{"/logger/config/{config_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ConfigService.DeleteConfigBulk",
			Path:    []string{"/logger/config"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ConfigService.ReadSystemObjects",
			Path:    []string{"/logger/available_objects"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ConfigService.ReadConfig",
			Path:    []string{"/logger/config/{config_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ConfigService.SearchConfig",
			Path:    []string{"/logger/config"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for ConfigService service

type ConfigService interface {
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...client.CallOption) (*Config, error)
	PatchConfig(ctx context.Context, in *PatchConfigRequest, opts ...client.CallOption) (*Config, error)
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...client.CallOption) (*Config, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...client.CallOption) (*Empty, error)
	DeleteConfigBulk(ctx context.Context, in *DeleteConfigBulkRequest, opts ...client.CallOption) (*Empty, error)
	ReadConfigByObjectId(ctx context.Context, in *ReadConfigByObjectIdRequest, opts ...client.CallOption) (*Config, error)
	CheckConfigStatus(ctx context.Context, in *CheckConfigStatusRequest, opts ...client.CallOption) (*ConfigStatus, error)
	ReadSystemObjects(ctx context.Context, in *ReadSystemObjectsRequest, opts ...client.CallOption) (*SystemObjects, error)
	ReadConfig(ctx context.Context, in *ReadConfigRequest, opts ...client.CallOption) (*Config, error)
	SearchConfig(ctx context.Context, in *SearchConfigRequest, opts ...client.CallOption) (*Configs, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...client.CallOption) (*Config, error) {
	req := c.c.NewRequest(c.name, "ConfigService.UpdateConfig", in)
	out := new(Config)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) PatchConfig(ctx context.Context, in *PatchConfigRequest, opts ...client.CallOption) (*Config, error) {
	req := c.c.NewRequest(c.name, "ConfigService.PatchConfig", in)
	out := new(Config)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...client.CallOption) (*Config, error) {
	req := c.c.NewRequest(c.name, "ConfigService.CreateConfig", in)
	out := new(Config)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "ConfigService.DeleteConfig", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeleteConfigBulk(ctx context.Context, in *DeleteConfigBulkRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "ConfigService.DeleteConfigBulk", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ReadConfigByObjectId(ctx context.Context, in *ReadConfigByObjectIdRequest, opts ...client.CallOption) (*Config, error) {
	req := c.c.NewRequest(c.name, "ConfigService.ReadConfigByObjectId", in)
	out := new(Config)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CheckConfigStatus(ctx context.Context, in *CheckConfigStatusRequest, opts ...client.CallOption) (*ConfigStatus, error) {
	req := c.c.NewRequest(c.name, "ConfigService.CheckConfigStatus", in)
	out := new(ConfigStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ReadSystemObjects(ctx context.Context, in *ReadSystemObjectsRequest, opts ...client.CallOption) (*SystemObjects, error) {
	req := c.c.NewRequest(c.name, "ConfigService.ReadSystemObjects", in)
	out := new(SystemObjects)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ReadConfig(ctx context.Context, in *ReadConfigRequest, opts ...client.CallOption) (*Config, error) {
	req := c.c.NewRequest(c.name, "ConfigService.ReadConfig", in)
	out := new(Config)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) SearchConfig(ctx context.Context, in *SearchConfigRequest, opts ...client.CallOption) (*Configs, error) {
	req := c.c.NewRequest(c.name, "ConfigService.SearchConfig", in)
	out := new(Configs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceHandler interface {
	UpdateConfig(context.Context, *UpdateConfigRequest, *Config) error
	PatchConfig(context.Context, *PatchConfigRequest, *Config) error
	CreateConfig(context.Context, *CreateConfigRequest, *Config) error
	DeleteConfig(context.Context, *DeleteConfigRequest, *Empty) error
	DeleteConfigBulk(context.Context, *DeleteConfigBulkRequest, *Empty) error
	ReadConfigByObjectId(context.Context, *ReadConfigByObjectIdRequest, *Config) error
	CheckConfigStatus(context.Context, *CheckConfigStatusRequest, *ConfigStatus) error
	ReadSystemObjects(context.Context, *ReadSystemObjectsRequest, *SystemObjects) error
	ReadConfig(context.Context, *ReadConfigRequest, *Config) error
	SearchConfig(context.Context, *SearchConfigRequest, *Configs) error
}

func RegisterConfigServiceHandler(s server.Server, hdlr ConfigServiceHandler, opts ...server.HandlerOption) error {
	type configService interface {
		UpdateConfig(ctx context.Context, in *UpdateConfigRequest, out *Config) error
		PatchConfig(ctx context.Context, in *PatchConfigRequest, out *Config) error
		CreateConfig(ctx context.Context, in *CreateConfigRequest, out *Config) error
		DeleteConfig(ctx context.Context, in *DeleteConfigRequest, out *Empty) error
		DeleteConfigBulk(ctx context.Context, in *DeleteConfigBulkRequest, out *Empty) error
		ReadConfigByObjectId(ctx context.Context, in *ReadConfigByObjectIdRequest, out *Config) error
		CheckConfigStatus(ctx context.Context, in *CheckConfigStatusRequest, out *ConfigStatus) error
		ReadSystemObjects(ctx context.Context, in *ReadSystemObjectsRequest, out *SystemObjects) error
		ReadConfig(ctx context.Context, in *ReadConfigRequest, out *Config) error
		SearchConfig(ctx context.Context, in *SearchConfigRequest, out *Configs) error
	}
	type ConfigService struct {
		configService
	}
	h := &configServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.UpdateConfig",
		Path:    []string{"/logger/config/{config_id}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.PatchConfig",
		Path:    []string{"/logger/config/{config_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.CreateConfig",
		Path:    []string{"/logger/config"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.DeleteConfig",
		Path:    []string{"/logger/config/{config_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.DeleteConfigBulk",
		Path:    []string{"/logger/config"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.ReadSystemObjects",
		Path:    []string{"/logger/available_objects"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.ReadConfig",
		Path:    []string{"/logger/config/{config_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.SearchConfig",
		Path:    []string{"/logger/config"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ConfigService{h}, opts...))
}

type configServiceHandler struct {
	ConfigServiceHandler
}

func (h *configServiceHandler) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, out *Config) error {
	return h.ConfigServiceHandler.UpdateConfig(ctx, in, out)
}

func (h *configServiceHandler) PatchConfig(ctx context.Context, in *PatchConfigRequest, out *Config) error {
	return h.ConfigServiceHandler.PatchConfig(ctx, in, out)
}

func (h *configServiceHandler) CreateConfig(ctx context.Context, in *CreateConfigRequest, out *Config) error {
	return h.ConfigServiceHandler.CreateConfig(ctx, in, out)
}

func (h *configServiceHandler) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, out *Empty) error {
	return h.ConfigServiceHandler.DeleteConfig(ctx, in, out)
}

func (h *configServiceHandler) DeleteConfigBulk(ctx context.Context, in *DeleteConfigBulkRequest, out *Empty) error {
	return h.ConfigServiceHandler.DeleteConfigBulk(ctx, in, out)
}

func (h *configServiceHandler) ReadConfigByObjectId(ctx context.Context, in *ReadConfigByObjectIdRequest, out *Config) error {
	return h.ConfigServiceHandler.ReadConfigByObjectId(ctx, in, out)
}

func (h *configServiceHandler) CheckConfigStatus(ctx context.Context, in *CheckConfigStatusRequest, out *ConfigStatus) error {
	return h.ConfigServiceHandler.CheckConfigStatus(ctx, in, out)
}

func (h *configServiceHandler) ReadSystemObjects(ctx context.Context, in *ReadSystemObjectsRequest, out *SystemObjects) error {
	return h.ConfigServiceHandler.ReadSystemObjects(ctx, in, out)
}

func (h *configServiceHandler) ReadConfig(ctx context.Context, in *ReadConfigRequest, out *Config) error {
	return h.ConfigServiceHandler.ReadConfig(ctx, in, out)
}

func (h *configServiceHandler) SearchConfig(ctx context.Context, in *SearchConfigRequest, out *Configs) error {
	return h.ConfigServiceHandler.SearchConfig(ctx, in, out)
}
