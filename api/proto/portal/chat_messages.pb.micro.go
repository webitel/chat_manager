// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat_messages.proto

package portal

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	messages "github.com/webitel/chat_manager/api/proto/chat/messages"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ChatMessagesService service

func NewChatMessagesServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ChatMessagesService service

type ChatMessagesService interface {
	// Returns the current user dialogs list.
	ChatDialogs(ctx context.Context, in *ChatDialogsRequest, opts ...client.CallOption) (*ChatList, error)
	// Sends a message to the chat.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*UpdateNewMessage, error)
	// Marks message history as read.
	ReadHistory(ctx context.Context, in *ReadHistoryRequest, opts ...client.CallOption) (*UpdateReadHistoryInbox, error)
	// Returns the conversation history with one interlocutor / within a chat.
	// Posible peer( type: string! ):
	// * "chat" ; A separate dialog from general correspondence with the interlocutor
	// * "user" ; Linked dialogs of general correspondence with the contact. Not implemented.
	// * <none> ; Points [TO] the default portal service (bot) chat dialog.
	ChatHistory(ctx context.Context, in *messages.ChatMessagesRequest, opts ...client.CallOption) (*messages.ChatMessages, error)
	// Returns the chat (peer) history updates (difference) since offset (state).
	ChatUpdates(ctx context.Context, in *messages.ChatMessagesRequest, opts ...client.CallOption) (*messages.ChatMessages, error)
	// Broadcast message `from` given bot profile to `peer` recipient(s)
	BroadcastMessage(ctx context.Context, in *messages.BroadcastMessageRequest, opts ...client.CallOption) (*messages.BroadcastMessageResponse, error)
}

type chatMessagesService struct {
	c    client.Client
	name string
}

func NewChatMessagesService(name string, c client.Client) ChatMessagesService {
	return &chatMessagesService{
		c:    c,
		name: name,
	}
}

func (c *chatMessagesService) ChatDialogs(ctx context.Context, in *ChatDialogsRequest, opts ...client.CallOption) (*ChatList, error) {
	req := c.c.NewRequest(c.name, "ChatMessagesService.ChatDialogs", in)
	out := new(ChatList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*UpdateNewMessage, error) {
	req := c.c.NewRequest(c.name, "ChatMessagesService.SendMessage", in)
	out := new(UpdateNewMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesService) ReadHistory(ctx context.Context, in *ReadHistoryRequest, opts ...client.CallOption) (*UpdateReadHistoryInbox, error) {
	req := c.c.NewRequest(c.name, "ChatMessagesService.ReadHistory", in)
	out := new(UpdateReadHistoryInbox)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesService) ChatHistory(ctx context.Context, in *messages.ChatMessagesRequest, opts ...client.CallOption) (*messages.ChatMessages, error) {
	req := c.c.NewRequest(c.name, "ChatMessagesService.ChatHistory", in)
	out := new(messages.ChatMessages)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesService) ChatUpdates(ctx context.Context, in *messages.ChatMessagesRequest, opts ...client.CallOption) (*messages.ChatMessages, error) {
	req := c.c.NewRequest(c.name, "ChatMessagesService.ChatUpdates", in)
	out := new(messages.ChatMessages)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesService) BroadcastMessage(ctx context.Context, in *messages.BroadcastMessageRequest, opts ...client.CallOption) (*messages.BroadcastMessageResponse, error) {
	req := c.c.NewRequest(c.name, "ChatMessagesService.BroadcastMessage", in)
	out := new(messages.BroadcastMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatMessagesService service

type ChatMessagesServiceHandler interface {
	// Returns the current user dialogs list.
	ChatDialogs(context.Context, *ChatDialogsRequest, *ChatList) error
	// Sends a message to the chat.
	SendMessage(context.Context, *SendMessageRequest, *UpdateNewMessage) error
	// Marks message history as read.
	ReadHistory(context.Context, *ReadHistoryRequest, *UpdateReadHistoryInbox) error
	// Returns the conversation history with one interlocutor / within a chat.
	// Posible peer( type: string! ):
	// * "chat" ; A separate dialog from general correspondence with the interlocutor
	// * "user" ; Linked dialogs of general correspondence with the contact. Not implemented.
	// * <none> ; Points [TO] the default portal service (bot) chat dialog.
	ChatHistory(context.Context, *messages.ChatMessagesRequest, *messages.ChatMessages) error
	// Returns the chat (peer) history updates (difference) since offset (state).
	ChatUpdates(context.Context, *messages.ChatMessagesRequest, *messages.ChatMessages) error
	// Broadcast message `from` given bot profile to `peer` recipient(s)
	BroadcastMessage(context.Context, *messages.BroadcastMessageRequest, *messages.BroadcastMessageResponse) error
}

func RegisterChatMessagesServiceHandler(s server.Server, hdlr ChatMessagesServiceHandler, opts ...server.HandlerOption) error {
	type chatMessagesService interface {
		ChatDialogs(ctx context.Context, in *ChatDialogsRequest, out *ChatList) error
		SendMessage(ctx context.Context, in *SendMessageRequest, out *UpdateNewMessage) error
		ReadHistory(ctx context.Context, in *ReadHistoryRequest, out *UpdateReadHistoryInbox) error
		ChatHistory(ctx context.Context, in *messages.ChatMessagesRequest, out *messages.ChatMessages) error
		ChatUpdates(ctx context.Context, in *messages.ChatMessagesRequest, out *messages.ChatMessages) error
		BroadcastMessage(ctx context.Context, in *messages.BroadcastMessageRequest, out *messages.BroadcastMessageResponse) error
	}
	type ChatMessagesService struct {
		chatMessagesService
	}
	h := &chatMessagesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChatMessagesService{h}, opts...))
}

type chatMessagesServiceHandler struct {
	ChatMessagesServiceHandler
}

func (h *chatMessagesServiceHandler) ChatDialogs(ctx context.Context, in *ChatDialogsRequest, out *ChatList) error {
	return h.ChatMessagesServiceHandler.ChatDialogs(ctx, in, out)
}

func (h *chatMessagesServiceHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *UpdateNewMessage) error {
	return h.ChatMessagesServiceHandler.SendMessage(ctx, in, out)
}

func (h *chatMessagesServiceHandler) ReadHistory(ctx context.Context, in *ReadHistoryRequest, out *UpdateReadHistoryInbox) error {
	return h.ChatMessagesServiceHandler.ReadHistory(ctx, in, out)
}

func (h *chatMessagesServiceHandler) ChatHistory(ctx context.Context, in *messages.ChatMessagesRequest, out *messages.ChatMessages) error {
	return h.ChatMessagesServiceHandler.ChatHistory(ctx, in, out)
}

func (h *chatMessagesServiceHandler) ChatUpdates(ctx context.Context, in *messages.ChatMessagesRequest, out *messages.ChatMessages) error {
	return h.ChatMessagesServiceHandler.ChatUpdates(ctx, in, out)
}

func (h *chatMessagesServiceHandler) BroadcastMessage(ctx context.Context, in *messages.BroadcastMessageRequest, out *messages.BroadcastMessageResponse) error {
	return h.ChatMessagesServiceHandler.BroadcastMessage(ctx, in, out)
}
