// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: chat_messages.proto

package portal

import (
	messages "github.com/webitel/chat_manager/api/proto/chat/messages"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Disposition int32

const (
	Disposition_Outgoing Disposition = 0
	Disposition_Incoming Disposition = 1
)

// Enum value maps for Disposition.
var (
	Disposition_name = map[int32]string{
		0: "Outgoing",
		1: "Incoming",
	}
	Disposition_value = map[string]int32{
		"Outgoing": 0,
		"Incoming": 1,
	}
)

func (x Disposition) Enum() *Disposition {
	p := new(Disposition)
	*p = x
	return p
}

func (x Disposition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disposition) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_messages_proto_enumTypes[0].Descriptor()
}

func (Disposition) Type() protoreflect.EnumType {
	return &file_chat_messages_proto_enumTypes[0]
}

func (x Disposition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disposition.Descriptor instead.
func (Disposition) EnumDescriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{0}
}

// Customer end-User messaging account settings
type ChatAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User self. The sender. You.
	User *messages.Peer `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ChatAccount) Reset() {
	*x = ChatAccount{}
	mi := &file_chat_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatAccount) ProtoMessage() {}

func (x *ChatAccount) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatAccount.ProtoReflect.Descriptor instead.
func (*ChatAccount) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{0}
}

func (x *ChatAccount) GetUser() *messages.Peer {
	if x != nil {
		return x.User
	}
	return nil
}

// Chat info.
// Reflects chat/messages.Chat
type Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the chat.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp of the last activity in the chat.
	Date int64 `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`
	// OPTIONAL. A non-zero value indicates that
	// the participant has left the chat. CLOSED(!)
	Left int64 `protobuf:"varint,8,opt,name=left,proto3" json:"left,omitempty"`
	// OPTIONAL. A non-zero value indicates when
	// the participant joined this chat conversation.
	Join int64 `protobuf:"varint,9,opt,name=join,proto3" json:"join,omitempty"`
	// The Interlocutor. Other side.
	Peer *messages.Peer `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	// Title of the chat.
	Title string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	// Inbox NEW [unread] message(s) count.
	// ( chat.message.id ~ read.message.id )
	Inbox int32 `protobuf:"varint,1,opt,name=inbox,proto3" json:"inbox,omitempty"`
	// Top (last) message in this chat.
	Message *messages.Message `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Chat) Reset() {
	*x = Chat{}
	mi := &file_chat_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Chat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chat) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Chat) GetLeft() int64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *Chat) GetJoin() int64 {
	if x != nil {
		return x.Join
	}
	return 0
}

func (x *Chat) GetPeer() *messages.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *Chat) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Chat) GetInbox() int32 {
	if x != nil {
		return x.Inbox
	}
	return 0
}

func (x *Chat) GetMessage() *messages.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChatDialogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number to return. **default**: 1.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Page records limit. **default**: 16.
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Search term: peer.name
	Q string `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	// Sort records by { fields } specification.
	Sort []string `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
	// Fields [Q]uery to build result dataset record.
	Fields []string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	// Set of unique chat IDentifier(s).
	// Accept: dialog -or- member ID.
	Id []string `protobuf:"bytes,6,rep,name=id,proto3" json:"id,omitempty"`
	// [PEER] Member of ...
	Peer *messages.Peer `protobuf:"bytes,8,opt,name=peer,proto3" json:"peer,omitempty"`
	// Date within timerange.
	Date *messages.Timerange `protobuf:"bytes,9,opt,name=date,proto3" json:"date,omitempty"`
	// Dialogs ONLY that are currently [not] active( closed: ? ).
	Online *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *ChatDialogsRequest) Reset() {
	*x = ChatDialogsRequest{}
	mi := &file_chat_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatDialogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatDialogsRequest) ProtoMessage() {}

func (x *ChatDialogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatDialogsRequest.ProtoReflect.Descriptor instead.
func (*ChatDialogsRequest) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{2}
}

func (x *ChatDialogsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChatDialogsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChatDialogsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ChatDialogsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ChatDialogsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ChatDialogsRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ChatDialogsRequest) GetPeer() *messages.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ChatDialogsRequest) GetDate() *messages.Timerange {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ChatDialogsRequest) GetOnline() *wrapperspb.BoolValue {
	if x != nil {
		return x.Online
	}
	return nil
}

// ChatDialogs dataset
type ChatList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dataset page of Chat(s).
	Data []*Chat `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// Page number of results.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Next page available ?
	Next bool `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ChatList) Reset() {
	*x = ChatList{}
	mi := &file_chat_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatList) ProtoMessage() {}

func (x *ChatList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatList.ProtoReflect.Descriptor instead.
func (*ChatList) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{3}
}

func (x *ChatList) GetData() []*Chat {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChatList) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChatList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client associated message id.
	// DEFAULT: Connect.Request.id
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The destination where the message will be sent.
	// - peer{ type:"chat", id: $chat_id }
	// - peer{ type:"user", id: $user_id }
	// Missing peer - points TO the default
	// portal "Service" (bot) chat dialog.
	Peer *messages.Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// Media file uploaded.
	// Not implemented yet.
	File *messages.File `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	// Media text message.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// Postback. Quick Reply Button Click[ed].
	Postback *messages.Postback `protobuf:"bytes,5,opt,name=postback,proto3" json:"postback,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_chat_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{4}
}

func (x *SendMessageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SendMessageRequest) GetPeer() *messages.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SendMessageRequest) GetFile() *messages.File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SendMessageRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendMessageRequest) GetPostback() *messages.Postback {
	if x != nil {
		return x.Postback
	}
	return nil
}

type ReadHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target chat dialog or user.
	// - peer{ type:"chat", id: $chat_id }
	// - peer{ type:"user", id: $user_id }
	// Missing peer - points TO the default
	// portal service chat Bot dialog.
	Peer *messages.Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// If a positive value is passed,
	// only messages with identifiers
	// less or equal than the given one
	// will be read.
	MaxId int64 `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *ReadHistoryRequest) Reset() {
	*x = ReadHistoryRequest{}
	mi := &file_chat_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHistoryRequest) ProtoMessage() {}

func (x *ReadHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHistoryRequest.ProtoReflect.Descriptor instead.
func (*ReadHistoryRequest) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{5}
}

func (x *ReadHistoryRequest) GetPeer() *messages.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReadHistoryRequest) GetMaxId() int64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

// New message in a chat history.
type UpdateNewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL. Client [send] message id.
	// DEFAULT: Connect.Request.id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Disposition of the current user.
	Dispo Disposition `protobuf:"varint,1,opt,name=dispo,proto3,enum=webitel.portal.Disposition" json:"dispo,omitempty"`
	// NEW message details.
	Message *messages.Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateNewMessage) Reset() {
	*x = UpdateNewMessage{}
	mi := &file_chat_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewMessage) ProtoMessage() {}

func (x *UpdateNewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewMessage.ProtoReflect.Descriptor instead.
func (*UpdateNewMessage) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNewMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateNewMessage) GetDispo() Disposition {
	if x != nil {
		return x.Dispo
	}
	return Disposition_Outgoing
}

func (x *UpdateNewMessage) GetMessage() *messages.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// Update about join NEW member(s) to the chat.
type UpdateChatMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat [TO] Update.
	Chat *messages.Chat `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	// Join NEW member(s)..
	Join []*messages.Peer `protobuf:"bytes,2,rep,name=join,proto3" json:"join,omitempty"`
}

func (x *UpdateChatMember) Reset() {
	*x = UpdateChatMember{}
	mi := &file_chat_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChatMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChatMember) ProtoMessage() {}

func (x *UpdateChatMember) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChatMember.ProtoReflect.Descriptor instead.
func (*UpdateChatMember) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateChatMember) GetChat() *messages.Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *UpdateChatMember) GetJoin() []*messages.Peer {
	if x != nil {
		return x.Join
	}
	return nil
}

// Update about that the member left the chat.
type UpdateLeftMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat [TO] Update.
	Chat *messages.Chat `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	// The member who left the chat.
	Left *messages.Peer `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
}

func (x *UpdateLeftMember) Reset() {
	*x = UpdateLeftMember{}
	mi := &file_chat_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLeftMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeftMember) ProtoMessage() {}

func (x *UpdateLeftMember) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeftMember.ProtoReflect.Descriptor instead.
func (*UpdateLeftMember) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateLeftMember) GetChat() *messages.Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *UpdateLeftMember) GetLeft() *messages.Peer {
	if x != nil {
		return x.Left
	}
	return nil
}

// Update about that the chat dialog is complete.
// NOTE: Next Messages.SendMessage call will open NEW dialog.chat
type UpdateChatComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat [TO] Update.
	Chat *messages.Chat `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	// Side member who closed this chat dialog.
	From *messages.Peer `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *UpdateChatComplete) Reset() {
	*x = UpdateChatComplete{}
	mi := &file_chat_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChatComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChatComplete) ProtoMessage() {}

func (x *UpdateChatComplete) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChatComplete.ProtoReflect.Descriptor instead.
func (*UpdateChatComplete) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateChatComplete) GetChat() *messages.Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *UpdateChatComplete) GetFrom() *messages.Peer {
	if x != nil {
		return x.From
	}
	return nil
}

// Incoming messages were read
type UpdateReadHistoryInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer chat dialog
	Peer *messages.Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// Maximum ID of messages read
	MaxId int64 `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	// Number of messages that are still unread
	Inbox int32 `protobuf:"varint,3,opt,name=inbox,proto3" json:"inbox,omitempty"`
}

func (x *UpdateReadHistoryInbox) Reset() {
	*x = UpdateReadHistoryInbox{}
	mi := &file_chat_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReadHistoryInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReadHistoryInbox) ProtoMessage() {}

func (x *UpdateReadHistoryInbox) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReadHistoryInbox.ProtoReflect.Descriptor instead.
func (*UpdateReadHistoryInbox) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateReadHistoryInbox) GetPeer() *messages.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *UpdateReadHistoryInbox) GetMaxId() int64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *UpdateReadHistoryInbox) GetInbox() int32 {
	if x != nil {
		return x.Inbox
	}
	return 0
}

// Outgoing messages were read
// Not Implemented yet !
type UpdateReadHistoryOutbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer chat dialog
	Peer *messages.Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// Maximum ID of read outgoing messages
	MaxId int64 `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *UpdateReadHistoryOutbox) Reset() {
	*x = UpdateReadHistoryOutbox{}
	mi := &file_chat_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReadHistoryOutbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReadHistoryOutbox) ProtoMessage() {}

func (x *UpdateReadHistoryOutbox) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReadHistoryOutbox.ProtoReflect.Descriptor instead.
func (*UpdateReadHistoryOutbox) Descriptor() ([]byte, []int) {
	return file_chat_messages_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateReadHistoryOutbox) GetPeer() *messages.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *UpdateReadHistoryOutbox) GetMaxId() int64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

var File_chat_messages_proto protoreflect.FileDescriptor

var file_chat_messages_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x61, 0x74, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x35, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x04, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x5c, 0x0a, 0x08, 0x43,
	0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x53, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x22, 0x62, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x64,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x22, 0x6d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x22, 0x58, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x2a, 0x29, 0x0a,
	0x0b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x32, 0x91, 0x04, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4b, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x22, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x22, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x4c, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x10, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a, 0x1c,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_messages_proto_rawDescOnce sync.Once
	file_chat_messages_proto_rawDescData = file_chat_messages_proto_rawDesc
)

func file_chat_messages_proto_rawDescGZIP() []byte {
	file_chat_messages_proto_rawDescOnce.Do(func() {
		file_chat_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_messages_proto_rawDescData)
	})
	return file_chat_messages_proto_rawDescData
}

var file_chat_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_chat_messages_proto_goTypes = []any{
	(Disposition)(0),                          // 0: webitel.portal.Disposition
	(*ChatAccount)(nil),                       // 1: webitel.portal.ChatAccount
	(*Chat)(nil),                              // 2: webitel.portal.Chat
	(*ChatDialogsRequest)(nil),                // 3: webitel.portal.ChatDialogsRequest
	(*ChatList)(nil),                          // 4: webitel.portal.ChatList
	(*SendMessageRequest)(nil),                // 5: webitel.portal.SendMessageRequest
	(*ReadHistoryRequest)(nil),                // 6: webitel.portal.ReadHistoryRequest
	(*UpdateNewMessage)(nil),                  // 7: webitel.portal.UpdateNewMessage
	(*UpdateChatMember)(nil),                  // 8: webitel.portal.UpdateChatMember
	(*UpdateLeftMember)(nil),                  // 9: webitel.portal.UpdateLeftMember
	(*UpdateChatComplete)(nil),                // 10: webitel.portal.UpdateChatComplete
	(*UpdateReadHistoryInbox)(nil),            // 11: webitel.portal.UpdateReadHistoryInbox
	(*UpdateReadHistoryOutbox)(nil),           // 12: webitel.portal.UpdateReadHistoryOutbox
	(*messages.Peer)(nil),                     // 13: webitel.chat.Peer
	(*messages.Message)(nil),                  // 14: webitel.chat.Message
	(*messages.Timerange)(nil),                // 15: webitel.chat.Timerange
	(*wrapperspb.BoolValue)(nil),              // 16: google.protobuf.BoolValue
	(*messages.File)(nil),                     // 17: webitel.chat.File
	(*messages.Postback)(nil),                 // 18: webitel.chat.Postback
	(*messages.Chat)(nil),                     // 19: webitel.chat.Chat
	(*messages.ChatMessagesRequest)(nil),      // 20: webitel.chat.ChatMessagesRequest
	(*messages.BroadcastMessageRequest)(nil),  // 21: webitel.chat.BroadcastMessageRequest
	(*messages.ChatMessages)(nil),             // 22: webitel.chat.ChatMessages
	(*messages.BroadcastMessageResponse)(nil), // 23: webitel.chat.BroadcastMessageResponse
}
var file_chat_messages_proto_depIdxs = []int32{
	13, // 0: webitel.portal.ChatAccount.user:type_name -> webitel.chat.Peer
	13, // 1: webitel.portal.Chat.peer:type_name -> webitel.chat.Peer
	14, // 2: webitel.portal.Chat.message:type_name -> webitel.chat.Message
	13, // 3: webitel.portal.ChatDialogsRequest.peer:type_name -> webitel.chat.Peer
	15, // 4: webitel.portal.ChatDialogsRequest.date:type_name -> webitel.chat.Timerange
	16, // 5: webitel.portal.ChatDialogsRequest.online:type_name -> google.protobuf.BoolValue
	2,  // 6: webitel.portal.ChatList.data:type_name -> webitel.portal.Chat
	13, // 7: webitel.portal.SendMessageRequest.peer:type_name -> webitel.chat.Peer
	17, // 8: webitel.portal.SendMessageRequest.file:type_name -> webitel.chat.File
	18, // 9: webitel.portal.SendMessageRequest.postback:type_name -> webitel.chat.Postback
	13, // 10: webitel.portal.ReadHistoryRequest.peer:type_name -> webitel.chat.Peer
	0,  // 11: webitel.portal.UpdateNewMessage.dispo:type_name -> webitel.portal.Disposition
	14, // 12: webitel.portal.UpdateNewMessage.message:type_name -> webitel.chat.Message
	19, // 13: webitel.portal.UpdateChatMember.chat:type_name -> webitel.chat.Chat
	13, // 14: webitel.portal.UpdateChatMember.join:type_name -> webitel.chat.Peer
	19, // 15: webitel.portal.UpdateLeftMember.chat:type_name -> webitel.chat.Chat
	13, // 16: webitel.portal.UpdateLeftMember.left:type_name -> webitel.chat.Peer
	19, // 17: webitel.portal.UpdateChatComplete.chat:type_name -> webitel.chat.Chat
	13, // 18: webitel.portal.UpdateChatComplete.from:type_name -> webitel.chat.Peer
	13, // 19: webitel.portal.UpdateReadHistoryInbox.peer:type_name -> webitel.chat.Peer
	13, // 20: webitel.portal.UpdateReadHistoryOutbox.peer:type_name -> webitel.chat.Peer
	3,  // 21: webitel.portal.ChatMessagesService.ChatDialogs:input_type -> webitel.portal.ChatDialogsRequest
	5,  // 22: webitel.portal.ChatMessagesService.SendMessage:input_type -> webitel.portal.SendMessageRequest
	6,  // 23: webitel.portal.ChatMessagesService.ReadHistory:input_type -> webitel.portal.ReadHistoryRequest
	20, // 24: webitel.portal.ChatMessagesService.ChatHistory:input_type -> webitel.chat.ChatMessagesRequest
	20, // 25: webitel.portal.ChatMessagesService.ChatUpdates:input_type -> webitel.chat.ChatMessagesRequest
	21, // 26: webitel.portal.ChatMessagesService.BroadcastMessage:input_type -> webitel.chat.BroadcastMessageRequest
	4,  // 27: webitel.portal.ChatMessagesService.ChatDialogs:output_type -> webitel.portal.ChatList
	7,  // 28: webitel.portal.ChatMessagesService.SendMessage:output_type -> webitel.portal.UpdateNewMessage
	11, // 29: webitel.portal.ChatMessagesService.ReadHistory:output_type -> webitel.portal.UpdateReadHistoryInbox
	22, // 30: webitel.portal.ChatMessagesService.ChatHistory:output_type -> webitel.chat.ChatMessages
	22, // 31: webitel.portal.ChatMessagesService.ChatUpdates:output_type -> webitel.chat.ChatMessages
	23, // 32: webitel.portal.ChatMessagesService.BroadcastMessage:output_type -> webitel.chat.BroadcastMessageResponse
	27, // [27:33] is the sub-list for method output_type
	21, // [21:27] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_chat_messages_proto_init() }
func file_chat_messages_proto_init() {
	if File_chat_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_messages_proto_goTypes,
		DependencyIndexes: file_chat_messages_proto_depIdxs,
		EnumInfos:         file_chat_messages_proto_enumTypes,
		MessageInfos:      file_chat_messages_proto_msgTypes,
	}.Build()
	File_chat_messages_proto = out.File
	file_chat_messages_proto_rawDesc = nil
	file_chat_messages_proto_goTypes = nil
	file_chat_messages_proto_depIdxs = nil
}
