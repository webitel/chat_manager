// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat/messages/contacts.proto

package messages

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ContactLinkingService service

func NewContactLinkingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "ContactLinkingService.LinkContactToClient",
			Path:    []string{"/chat/{conversation_id}/link"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "ContactLinkingService.CreateContactFromConversation",
			Path:    []string{"/chat/{conversation_id}/contact"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for ContactLinkingService service

type ContactLinkingService interface {
	// LinkContactToClient creates connection between existing internal contact and external client.
	LinkContactToClient(ctx context.Context, in *LinkContactToClientRequest, opts ...client.CallOption) (*EmptyResponse, error)
	// CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
	CreateContactFromConversation(ctx context.Context, in *CreateContactFromConversationRequest, opts ...client.CallOption) (*Lookup, error)
	// CreateContactFromConversation[No Authorization] creates new contact from the data existing in the conversation and after that links this contact to the external user.
	LinkContactToClientNA(ctx context.Context, in *LinkContactToClientNARequest, opts ...client.CallOption) (*LinkContactToClientNAResponse, error)
}

type contactLinkingService struct {
	c    client.Client
	name string
}

func NewContactLinkingService(name string, c client.Client) ContactLinkingService {
	return &contactLinkingService{
		c:    c,
		name: name,
	}
}

func (c *contactLinkingService) LinkContactToClient(ctx context.Context, in *LinkContactToClientRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ContactLinkingService.LinkContactToClient", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactLinkingService) CreateContactFromConversation(ctx context.Context, in *CreateContactFromConversationRequest, opts ...client.CallOption) (*Lookup, error) {
	req := c.c.NewRequest(c.name, "ContactLinkingService.CreateContactFromConversation", in)
	out := new(Lookup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactLinkingService) LinkContactToClientNA(ctx context.Context, in *LinkContactToClientNARequest, opts ...client.CallOption) (*LinkContactToClientNAResponse, error) {
	req := c.c.NewRequest(c.name, "ContactLinkingService.LinkContactToClientNA", in)
	out := new(LinkContactToClientNAResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContactLinkingService service

type ContactLinkingServiceHandler interface {
	// LinkContactToClient creates connection between existing internal contact and external client.
	LinkContactToClient(context.Context, *LinkContactToClientRequest, *EmptyResponse) error
	// CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
	CreateContactFromConversation(context.Context, *CreateContactFromConversationRequest, *Lookup) error
	// CreateContactFromConversation[No Authorization] creates new contact from the data existing in the conversation and after that links this contact to the external user.
	LinkContactToClientNA(context.Context, *LinkContactToClientNARequest, *LinkContactToClientNAResponse) error
}

func RegisterContactLinkingServiceHandler(s server.Server, hdlr ContactLinkingServiceHandler, opts ...server.HandlerOption) error {
	type contactLinkingService interface {
		LinkContactToClient(ctx context.Context, in *LinkContactToClientRequest, out *EmptyResponse) error
		CreateContactFromConversation(ctx context.Context, in *CreateContactFromConversationRequest, out *Lookup) error
		LinkContactToClientNA(ctx context.Context, in *LinkContactToClientNARequest, out *LinkContactToClientNAResponse) error
	}
	type ContactLinkingService struct {
		contactLinkingService
	}
	h := &contactLinkingServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ContactLinkingService.LinkContactToClient",
		Path:    []string{"/chat/{conversation_id}/link"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ContactLinkingService.CreateContactFromConversation",
		Path:    []string{"/chat/{conversation_id}/contact"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ContactLinkingService{h}, opts...))
}

type contactLinkingServiceHandler struct {
	ContactLinkingServiceHandler
}

func (h *contactLinkingServiceHandler) LinkContactToClient(ctx context.Context, in *LinkContactToClientRequest, out *EmptyResponse) error {
	return h.ContactLinkingServiceHandler.LinkContactToClient(ctx, in, out)
}

func (h *contactLinkingServiceHandler) CreateContactFromConversation(ctx context.Context, in *CreateContactFromConversationRequest, out *Lookup) error {
	return h.ContactLinkingServiceHandler.CreateContactFromConversation(ctx, in, out)
}

func (h *contactLinkingServiceHandler) LinkContactToClientNA(ctx context.Context, in *LinkContactToClientNARequest, out *LinkContactToClientNAResponse) error {
	return h.ContactLinkingServiceHandler.LinkContactToClientNA(ctx, in, out)
}

// Api Endpoints for ContactsChatCatalog service

func NewContactsChatCatalogEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "ContactsChatCatalog.GetContactChatHistory",
			Path:    []string{"contacts/{contact_id}/chat/{chat_id}/messages"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for ContactsChatCatalog service

type ContactsChatCatalogService interface {
	GetContactChatHistory(ctx context.Context, in *GetContactChatHistoryRequest, opts ...client.CallOption) (*GetContactChatHistoryResponse, error)
}

type contactsChatCatalogService struct {
	c    client.Client
	name string
}

func NewContactsChatCatalogService(name string, c client.Client) ContactsChatCatalogService {
	return &contactsChatCatalogService{
		c:    c,
		name: name,
	}
}

func (c *contactsChatCatalogService) GetContactChatHistory(ctx context.Context, in *GetContactChatHistoryRequest, opts ...client.CallOption) (*GetContactChatHistoryResponse, error) {
	req := c.c.NewRequest(c.name, "ContactsChatCatalog.GetContactChatHistory", in)
	out := new(GetContactChatHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContactsChatCatalog service

type ContactsChatCatalogHandler interface {
	GetContactChatHistory(context.Context, *GetContactChatHistoryRequest, *GetContactChatHistoryResponse) error
}

func RegisterContactsChatCatalogHandler(s server.Server, hdlr ContactsChatCatalogHandler, opts ...server.HandlerOption) error {
	type contactsChatCatalog interface {
		GetContactChatHistory(ctx context.Context, in *GetContactChatHistoryRequest, out *GetContactChatHistoryResponse) error
	}
	type ContactsChatCatalog struct {
		contactsChatCatalog
	}
	h := &contactsChatCatalogHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ContactsChatCatalog.GetContactChatHistory",
		Path:    []string{"contacts/{contact_id}/chat/{chat_id}/messages"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ContactsChatCatalog{h}, opts...))
}

type contactsChatCatalogHandler struct {
	ContactsChatCatalogHandler
}

func (h *contactsChatCatalogHandler) GetContactChatHistory(ctx context.Context, in *GetContactChatHistoryRequest, out *GetContactChatHistoryResponse) error {
	return h.ContactsChatCatalogHandler.GetContactChatHistory(ctx, in, out)
}
