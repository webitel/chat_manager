// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.5
// source: chat/messages/contacts.proto

package messages

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of request to share contact info
type MessageButton_Request int32

const (
	// Phone Number
	MessageButton_phone MessageButton_Request = 0
	// Email Address
	MessageButton_email MessageButton_Request = 1
	// General Form
	MessageButton_contact MessageButton_Request = 2
	// Current Location
	MessageButton_location MessageButton_Request = 3
)

// Enum value maps for MessageButton_Request.
var (
	MessageButton_Request_name = map[int32]string{
		0: "phone",
		1: "email",
		2: "contact",
		3: "location",
	}
	MessageButton_Request_value = map[string]int32{
		"phone":    0,
		"email":    1,
		"contact":  2,
		"location": 3,
	}
)

func (x MessageButton_Request) Enum() *MessageButton_Request {
	p := new(MessageButton_Request)
	*p = x
	return p
}

func (x MessageButton_Request) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageButton_Request) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_messages_contacts_proto_enumTypes[0].Descriptor()
}

func (MessageButton_Request) Type() protoreflect.EnumType {
	return &file_chat_messages_contacts_proto_enumTypes[0]
}

func (x MessageButton_Request) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageButton_Request.Descriptor instead.
func (MessageButton_Request) EnumDescriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{11, 0}
}

type LinkContactToClientNARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ContactId      string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *LinkContactToClientNARequest) Reset() {
	*x = LinkContactToClientNARequest{}
	mi := &file_chat_messages_contacts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkContactToClientNARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkContactToClientNARequest) ProtoMessage() {}

func (x *LinkContactToClientNARequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkContactToClientNARequest.ProtoReflect.Descriptor instead.
func (*LinkContactToClientNARequest) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{0}
}

func (x *LinkContactToClientNARequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *LinkContactToClientNARequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

type LinkContactToClientNAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkContactToClientNAResponse) Reset() {
	*x = LinkContactToClientNAResponse{}
	mi := &file_chat_messages_contacts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkContactToClientNAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkContactToClientNAResponse) ProtoMessage() {}

func (x *LinkContactToClientNAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkContactToClientNAResponse.ProtoReflect.Descriptor instead.
func (*LinkContactToClientNAResponse) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{1}
}

type LinkContactToClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ContactId      string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *LinkContactToClientRequest) Reset() {
	*x = LinkContactToClientRequest{}
	mi := &file_chat_messages_contacts_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkContactToClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkContactToClientRequest) ProtoMessage() {}

func (x *LinkContactToClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkContactToClientRequest.ProtoReflect.Descriptor instead.
func (*LinkContactToClientRequest) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{2}
}

func (x *LinkContactToClientRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *LinkContactToClientRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

type CreateContactFromConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId string   `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Timezone       *Lookup  `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Owner          *Lookup  `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Label          []string `protobuf:"bytes,4,rep,name=label,proto3" json:"label,omitempty"`
	Name           string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description    string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateContactFromConversationRequest) Reset() {
	*x = CreateContactFromConversationRequest{}
	mi := &file_chat_messages_contacts_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContactFromConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContactFromConversationRequest) ProtoMessage() {}

func (x *CreateContactFromConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContactFromConversationRequest.ProtoReflect.Descriptor instead.
func (*CreateContactFromConversationRequest) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{3}
}

func (x *CreateContactFromConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *CreateContactFromConversationRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *CreateContactFromConversationRequest) GetOwner() *Lookup {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateContactFromConversationRequest) GetLabel() []string {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *CreateContactFromConversationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateContactFromConversationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	mi := &file_chat_messages_contacts_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{4}
}

type Lookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Lookup) Reset() {
	*x = Lookup{}
	mi := &file_chat_messages_contacts_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lookup) ProtoMessage() {}

func (x *Lookup) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lookup.ProtoReflect.Descriptor instead.
func (*Lookup) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{5}
}

func (x *Lookup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lookup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetContactChatHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset messages.
	Offset *GetContactChatHistoryRequest_Offset `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Number of messages to return.
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Search term: message.text
	Q string `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	// Fields to return into result.
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique chat dialog
	ChatId string `protobuf:"bytes,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Contact identificator
	ContactId string `protobuf:"bytes,7,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Includes the history of ONLY those dialogs
	// whose member channel(s) contain
	// a specified set of variables.
	Group map[string]string `protobuf:"bytes,8,rep,name=group,proto3" json:"group,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetContactChatHistoryRequest) Reset() {
	*x = GetContactChatHistoryRequest{}
	mi := &file_chat_messages_contacts_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactChatHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactChatHistoryRequest) ProtoMessage() {}

func (x *GetContactChatHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactChatHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetContactChatHistoryRequest) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{6}
}

func (x *GetContactChatHistoryRequest) GetOffset() *GetContactChatHistoryRequest_Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *GetContactChatHistoryRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetContactChatHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetContactChatHistoryRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *GetContactChatHistoryRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetContactChatHistoryRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *GetContactChatHistoryRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *GetContactChatHistoryRequest) GetGroup() map[string]string {
	if x != nil {
		return x.Group
	}
	return nil
}

// Chat Message.
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique message identifier inside this chat.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp when this message was sent (published).
	Date int64 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	// Sender of the message.
	From *ChatPeer `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Conversation the message belongs to ..
	Chat *ContactChat `protobuf:"bytes,4,opt,name=chat,proto3" json:"chat,omitempty"`
	// Chat Sender of the message, sent on behalf of a chat (member).
	Sender *ContactChat `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	// Timestamp when this message was last edited.
	Edit int64 `protobuf:"varint,6,opt,name=edit,proto3" json:"edit,omitempty"`
	// Message Text.
	Text string `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	// Message Media. Attachment.
	File *MessageFile `protobuf:"bytes,8,opt,name=file,proto3" json:"file,omitempty"`
	// Context. Variables. Environment.
	Context map[string]string `protobuf:"bytes,9,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Keyboard. Buttons. Quick Replies.
	Keyboard *MessageReplyMarkup `protobuf:"bytes,10,opt,name=keyboard,proto3" json:"keyboard,omitempty"`
	// Postback. Reply Button Click[ed].
	Postback *MessagePostback `protobuf:"bytes,11,opt,name=postback,proto3" json:"postback,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_chat_messages_contacts_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{7}
}

func (x *ChatMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatMessage) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatMessage) GetFrom() *ChatPeer {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ChatMessage) GetChat() *ContactChat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ChatMessage) GetSender() *ContactChat {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *ChatMessage) GetEdit() int64 {
	if x != nil {
		return x.Edit
	}
	return 0
}

func (x *ChatMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatMessage) GetFile() *MessageFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ChatMessage) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ChatMessage) GetKeyboard() *MessageReplyMarkup {
	if x != nil {
		return x.Keyboard
	}
	return nil
}

func (x *ChatMessage) GetPostback() *MessagePostback {
	if x != nil {
		return x.Postback
	}
	return nil
}

// Media File.
type MessageFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File location
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Size in bytes
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// MIME media type
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Filename
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Exact url of file (if exists)
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *MessageFile) Reset() {
	*x = MessageFile{}
	mi := &file_chat_messages_contacts_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFile) ProtoMessage() {}

func (x *MessageFile) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFile.ProtoReflect.Descriptor instead.
func (*MessageFile) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{8}
}

func (x *MessageFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MessageFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageFile) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MessageReplyMarkup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An option used to block input to force
	// the user to respond with one of the buttons.
	NoInput bool `protobuf:"varint,2,opt,name=no_input,json=noInput,proto3" json:"no_input,omitempty"`
	// Markup of button(s)
	Buttons []*MessageButtonRow `protobuf:"bytes,1,rep,name=buttons,proto3" json:"buttons,omitempty"`
}

func (x *MessageReplyMarkup) Reset() {
	*x = MessageReplyMarkup{}
	mi := &file_chat_messages_contacts_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageReplyMarkup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReplyMarkup) ProtoMessage() {}

func (x *MessageReplyMarkup) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReplyMarkup.ProtoReflect.Descriptor instead.
func (*MessageReplyMarkup) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{9}
}

func (x *MessageReplyMarkup) GetNoInput() bool {
	if x != nil {
		return x.NoInput
	}
	return false
}

func (x *MessageReplyMarkup) GetButtons() []*MessageButtonRow {
	if x != nil {
		return x.Buttons
	}
	return nil
}

type MessageButtonRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Button(s) in a row
	Row []*MessageButton `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"`
}

func (x *MessageButtonRow) Reset() {
	*x = MessageButtonRow{}
	mi := &file_chat_messages_contacts_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageButtonRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageButtonRow) ProtoMessage() {}

func (x *MessageButtonRow) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageButtonRow.ProtoReflect.Descriptor instead.
func (*MessageButtonRow) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{10}
}

func (x *MessageButtonRow) GetRow() []*MessageButton {
	if x != nil {
		return x.Row
	}
	return nil
}

type MessageButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Caption to display.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Type of the button.
	//
	// Types that are assignable to Type:
	//
	//	*MessageButton_Url
	//	*MessageButton_Code
	//	*MessageButton_Share
	Type isMessageButton_Type `protobuf_oneof:"type"`
}

func (x *MessageButton) Reset() {
	*x = MessageButton{}
	mi := &file_chat_messages_contacts_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageButton) ProtoMessage() {}

func (x *MessageButton) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageButton.ProtoReflect.Descriptor instead.
func (*MessageButton) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{11}
}

func (x *MessageButton) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (m *MessageButton) GetType() isMessageButton_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MessageButton) GetUrl() string {
	if x, ok := x.GetType().(*MessageButton_Url); ok {
		return x.Url
	}
	return ""
}

func (x *MessageButton) GetCode() string {
	if x, ok := x.GetType().(*MessageButton_Code); ok {
		return x.Code
	}
	return ""
}

func (x *MessageButton) GetShare() MessageButton_Request {
	if x, ok := x.GetType().(*MessageButton_Share); ok {
		return x.Share
	}
	return MessageButton_phone
}

type isMessageButton_Type interface {
	isMessageButton_Type()
}

type MessageButton_Url struct {
	// URL to navigate to ..
	Url string `protobuf:"bytes,2,opt,name=url,proto3,oneof"`
}

type MessageButton_Code struct {
	// Postback/Callback data.
	Code string `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type MessageButton_Share struct {
	// Request to share contact info.
	Share MessageButton_Request `protobuf:"varint,4,opt,name=share,proto3,enum=webitel.chat.MessageButton_Request,oneof"`
}

func (*MessageButton_Url) isMessageButton_Type() {}

func (*MessageButton_Code) isMessageButton_Type() {}

func (*MessageButton_Share) isMessageButton_Type() {}

// Postback. Reply Button Click[ed].
type MessagePostback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message ID of the button.
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// Data associated with the Button.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Button's display caption.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MessagePostback) Reset() {
	*x = MessagePostback{}
	mi := &file_chat_messages_contacts_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagePostback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePostback) ProtoMessage() {}

func (x *MessagePostback) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePostback.ProtoReflect.Descriptor instead.
func (*MessagePostback) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{12}
}

func (x *MessagePostback) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *MessagePostback) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MessagePostback) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Peer contact.
type ChatPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contact unique **ID**entifier.
	// Contact **type**-specific string.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Contact **type** provider.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Contact display **name**.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChatPeer) Reset() {
	*x = ChatPeer{}
	mi := &file_chat_messages_contacts_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPeer) ProtoMessage() {}

func (x *ChatPeer) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPeer.ProtoReflect.Descriptor instead.
func (*ChatPeer) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{13}
}

func (x *ChatPeer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatPeer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatPeer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The Chat info.
// Alias: participant, subscriber, member, peer, leg.
type ContactChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [D]omain[C]omponent primary ID.
	Dc int64 `protobuf:"varint,1,opt,name=dc,proto3" json:"dc,omitempty"`
	// Unique identifier for this chat.
	// [FROM] Member / Channel ID.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// [FROM] VIA text gateway profile.
	Via *ChatPeer `protobuf:"bytes,5,opt,name=via,proto3" json:"via,omitempty"`
	// [FROM]: User identity. Seed.
	Peer *ChatPeer `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	// [TO]: Chat title.
	Title string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	// OPTIONAL. A non-zero value indicates that
	// the participant has left the chat. OFFLINE(!)
	Left int64 `protobuf:"varint,10,opt,name=left,proto3" json:"left,omitempty"`
	// OPTIONAL. A non-zero value indicates that
	// the participant has joined the chat.
	Join int64 `protobuf:"varint,11,opt,name=join,proto3" json:"join,omitempty"`
	// OPTIONAL. Invite[d] BY member info.
	Invite *ContactChat_Invite `protobuf:"bytes,13,opt,name=invite,proto3" json:"invite,omitempty"`
	// Context. Variables.
	Context map[string]string `protobuf:"bytes,15,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ContactChat) Reset() {
	*x = ContactChat{}
	mi := &file_chat_messages_contacts_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactChat) ProtoMessage() {}

func (x *ContactChat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactChat.ProtoReflect.Descriptor instead.
func (*ContactChat) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{14}
}

func (x *ContactChat) GetDc() int64 {
	if x != nil {
		return x.Dc
	}
	return 0
}

func (x *ContactChat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactChat) GetVia() *ChatPeer {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *ContactChat) GetPeer() *ChatPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ContactChat) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ContactChat) GetLeft() int64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *ContactChat) GetJoin() int64 {
	if x != nil {
		return x.Join
	}
	return 0
}

func (x *ContactChat) GetInvite() *ContactChat_Invite {
	if x != nil {
		return x.Invite
	}
	return nil
}

func (x *ContactChat) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

// ChatMessages dataset
type GetContactChatHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dataset page of messages.
	Messages []*ChatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// List of chats mentioned in messages. [FROM]
	Chats []*ContactChat `protobuf:"bytes,2,rep,name=chats,proto3" json:"chats,omitempty"`
	// List of peers mentioned in messages. [FROM]
	Peers []*ChatPeer `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	// Dataset page number.
	Page int32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// Next page is available ?
	Next bool `protobuf:"varint,6,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *GetContactChatHistoryResponse) Reset() {
	*x = GetContactChatHistoryResponse{}
	mi := &file_chat_messages_contacts_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactChatHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactChatHistoryResponse) ProtoMessage() {}

func (x *GetContactChatHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactChatHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetContactChatHistoryResponse) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{15}
}

func (x *GetContactChatHistoryResponse) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetContactChatHistoryResponse) GetChats() []*ContactChat {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *GetContactChatHistoryResponse) GetPeers() []*ChatPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *GetContactChatHistoryResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetContactChatHistoryResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

// Offset options
type GetContactChatHistoryRequest_Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Messages ONLY starting from the specified message ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Messages ONLY been sent before the specified epochtime(milli).
	Date int64 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetContactChatHistoryRequest_Offset) Reset() {
	*x = GetContactChatHistoryRequest_Offset{}
	mi := &file_chat_messages_contacts_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactChatHistoryRequest_Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactChatHistoryRequest_Offset) ProtoMessage() {}

func (x *GetContactChatHistoryRequest_Offset) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactChatHistoryRequest_Offset.ProtoReflect.Descriptor instead.
func (*GetContactChatHistoryRequest_Offset) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetContactChatHistoryRequest_Offset) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetContactChatHistoryRequest_Offset) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type ContactChat_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the invitation to join the chat was sent
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	// Chat member ID who invited to join the chat
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *ContactChat_Invite) Reset() {
	*x = ContactChat_Invite{}
	mi := &file_chat_messages_contacts_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactChat_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactChat_Invite) ProtoMessage() {}

func (x *ContactChat_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_messages_contacts_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactChat_Invite.ProtoReflect.Descriptor instead.
func (*ContactChat_Invite) Descriptor() ([]byte, []int) {
	return file_chat_messages_contacts_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ContactChat_Invite) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ContactChat_Invite) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

var File_chat_messages_contacts_proto protoreflect.FileDescriptor

var file_chat_messages_contacts_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x1c, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x1a, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x24, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x2c, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x04, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x65, 0x64, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x1a,
	0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x69, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6e, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x22, 0x3a, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x09,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x42, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x64, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x03, 0x76,
	0x69, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x06,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x06,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x30, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x32, 0xa5, 0x03, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x92, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1f, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x72, 0x0a, 0x15, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x41, 0x12, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe8,
	0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0xd0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x58, 0x5a, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_messages_contacts_proto_rawDescOnce sync.Once
	file_chat_messages_contacts_proto_rawDescData = file_chat_messages_contacts_proto_rawDesc
)

func file_chat_messages_contacts_proto_rawDescGZIP() []byte {
	file_chat_messages_contacts_proto_rawDescOnce.Do(func() {
		file_chat_messages_contacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_messages_contacts_proto_rawDescData)
	})
	return file_chat_messages_contacts_proto_rawDescData
}

var file_chat_messages_contacts_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_messages_contacts_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_chat_messages_contacts_proto_goTypes = []any{
	(MessageButton_Request)(0),                   // 0: webitel.chat.MessageButton.Request
	(*LinkContactToClientNARequest)(nil),         // 1: webitel.chat.LinkContactToClientNARequest
	(*LinkContactToClientNAResponse)(nil),        // 2: webitel.chat.LinkContactToClientNAResponse
	(*LinkContactToClientRequest)(nil),           // 3: webitel.chat.LinkContactToClientRequest
	(*CreateContactFromConversationRequest)(nil), // 4: webitel.chat.CreateContactFromConversationRequest
	(*EmptyResponse)(nil),                        // 5: webitel.chat.EmptyResponse
	(*Lookup)(nil),                               // 6: webitel.chat.Lookup
	(*GetContactChatHistoryRequest)(nil),         // 7: webitel.chat.GetContactChatHistoryRequest
	(*ChatMessage)(nil),                          // 8: webitel.chat.ChatMessage
	(*MessageFile)(nil),                          // 9: webitel.chat.MessageFile
	(*MessageReplyMarkup)(nil),                   // 10: webitel.chat.MessageReplyMarkup
	(*MessageButtonRow)(nil),                     // 11: webitel.chat.MessageButtonRow
	(*MessageButton)(nil),                        // 12: webitel.chat.MessageButton
	(*MessagePostback)(nil),                      // 13: webitel.chat.MessagePostback
	(*ChatPeer)(nil),                             // 14: webitel.chat.ChatPeer
	(*ContactChat)(nil),                          // 15: webitel.chat.ContactChat
	(*GetContactChatHistoryResponse)(nil),        // 16: webitel.chat.GetContactChatHistoryResponse
	(*GetContactChatHistoryRequest_Offset)(nil),  // 17: webitel.chat.GetContactChatHistoryRequest.Offset
	nil,                        // 18: webitel.chat.GetContactChatHistoryRequest.GroupEntry
	nil,                        // 19: webitel.chat.ChatMessage.ContextEntry
	(*ContactChat_Invite)(nil), // 20: webitel.chat.ContactChat.Invite
	nil,                        // 21: webitel.chat.ContactChat.ContextEntry
}
var file_chat_messages_contacts_proto_depIdxs = []int32{
	6,  // 0: webitel.chat.CreateContactFromConversationRequest.timezone:type_name -> webitel.chat.Lookup
	6,  // 1: webitel.chat.CreateContactFromConversationRequest.owner:type_name -> webitel.chat.Lookup
	17, // 2: webitel.chat.GetContactChatHistoryRequest.offset:type_name -> webitel.chat.GetContactChatHistoryRequest.Offset
	18, // 3: webitel.chat.GetContactChatHistoryRequest.group:type_name -> webitel.chat.GetContactChatHistoryRequest.GroupEntry
	14, // 4: webitel.chat.ChatMessage.from:type_name -> webitel.chat.ChatPeer
	15, // 5: webitel.chat.ChatMessage.chat:type_name -> webitel.chat.ContactChat
	15, // 6: webitel.chat.ChatMessage.sender:type_name -> webitel.chat.ContactChat
	9,  // 7: webitel.chat.ChatMessage.file:type_name -> webitel.chat.MessageFile
	19, // 8: webitel.chat.ChatMessage.context:type_name -> webitel.chat.ChatMessage.ContextEntry
	10, // 9: webitel.chat.ChatMessage.keyboard:type_name -> webitel.chat.MessageReplyMarkup
	13, // 10: webitel.chat.ChatMessage.postback:type_name -> webitel.chat.MessagePostback
	11, // 11: webitel.chat.MessageReplyMarkup.buttons:type_name -> webitel.chat.MessageButtonRow
	12, // 12: webitel.chat.MessageButtonRow.row:type_name -> webitel.chat.MessageButton
	0,  // 13: webitel.chat.MessageButton.share:type_name -> webitel.chat.MessageButton.Request
	14, // 14: webitel.chat.ContactChat.via:type_name -> webitel.chat.ChatPeer
	14, // 15: webitel.chat.ContactChat.peer:type_name -> webitel.chat.ChatPeer
	20, // 16: webitel.chat.ContactChat.invite:type_name -> webitel.chat.ContactChat.Invite
	21, // 17: webitel.chat.ContactChat.context:type_name -> webitel.chat.ContactChat.ContextEntry
	8,  // 18: webitel.chat.GetContactChatHistoryResponse.messages:type_name -> webitel.chat.ChatMessage
	15, // 19: webitel.chat.GetContactChatHistoryResponse.chats:type_name -> webitel.chat.ContactChat
	14, // 20: webitel.chat.GetContactChatHistoryResponse.peers:type_name -> webitel.chat.ChatPeer
	3,  // 21: webitel.chat.ContactLinkingService.LinkContactToClient:input_type -> webitel.chat.LinkContactToClientRequest
	4,  // 22: webitel.chat.ContactLinkingService.CreateContactFromConversation:input_type -> webitel.chat.CreateContactFromConversationRequest
	1,  // 23: webitel.chat.ContactLinkingService.LinkContactToClientNA:input_type -> webitel.chat.LinkContactToClientNARequest
	7,  // 24: webitel.chat.ContactsChatCatalog.GetContactChatHistory:input_type -> webitel.chat.GetContactChatHistoryRequest
	5,  // 25: webitel.chat.ContactLinkingService.LinkContactToClient:output_type -> webitel.chat.EmptyResponse
	6,  // 26: webitel.chat.ContactLinkingService.CreateContactFromConversation:output_type -> webitel.chat.Lookup
	2,  // 27: webitel.chat.ContactLinkingService.LinkContactToClientNA:output_type -> webitel.chat.LinkContactToClientNAResponse
	16, // 28: webitel.chat.ContactsChatCatalog.GetContactChatHistory:output_type -> webitel.chat.GetContactChatHistoryResponse
	25, // [25:29] is the sub-list for method output_type
	21, // [21:25] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_chat_messages_contacts_proto_init() }
func file_chat_messages_contacts_proto_init() {
	if File_chat_messages_contacts_proto != nil {
		return
	}
	file_chat_messages_contacts_proto_msgTypes[11].OneofWrappers = []any{
		(*MessageButton_Url)(nil),
		(*MessageButton_Code)(nil),
		(*MessageButton_Share)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_messages_contacts_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chat_messages_contacts_proto_goTypes,
		DependencyIndexes: file_chat_messages_contacts_proto_depIdxs,
		EnumInfos:         file_chat_messages_contacts_proto_enumTypes,
		MessageInfos:      file_chat_messages_contacts_proto_msgTypes,
	}.Build()
	File_chat_messages_contacts_proto = out.File
	file_chat_messages_contacts_proto_rawDesc = nil
	file_chat_messages_contacts_proto_goTypes = nil
	file_chat_messages_contacts_proto_depIdxs = nil
}
