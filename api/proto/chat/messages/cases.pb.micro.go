// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat/messages/cases.proto

package messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CasesChatCatalog service

func NewCasesChatCatalogEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "CasesChatCatalog.GetCaseChatHistory",
			Path:    []string{"/cases/{case_id}/chat/{chat_id}/messages"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for CasesChatCatalog service

type CasesChatCatalogService interface {
	GetCaseChatHistory(ctx context.Context, in *GetCaseChatHistoryRequest, opts ...client.CallOption) (*ChatMessages, error)
}

type casesChatCatalogService struct {
	c    client.Client
	name string
}

func NewCasesChatCatalogService(name string, c client.Client) CasesChatCatalogService {
	return &casesChatCatalogService{
		c:    c,
		name: name,
	}
}

func (c *casesChatCatalogService) GetCaseChatHistory(ctx context.Context, in *GetCaseChatHistoryRequest, opts ...client.CallOption) (*ChatMessages, error) {
	req := c.c.NewRequest(c.name, "CasesChatCatalog.GetCaseChatHistory", in)
	out := new(ChatMessages)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CasesChatCatalog service

type CasesChatCatalogHandler interface {
	GetCaseChatHistory(context.Context, *GetCaseChatHistoryRequest, *ChatMessages) error
}

func RegisterCasesChatCatalogHandler(s server.Server, hdlr CasesChatCatalogHandler, opts ...server.HandlerOption) error {
	type casesChatCatalog interface {
		GetCaseChatHistory(ctx context.Context, in *GetCaseChatHistoryRequest, out *ChatMessages) error
	}
	type CasesChatCatalog struct {
		casesChatCatalog
	}
	h := &casesChatCatalogHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CasesChatCatalog.GetCaseChatHistory",
		Path:    []string{"/cases/{case_id}/chat/{chat_id}/messages"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&CasesChatCatalog{h}, opts...))
}

type casesChatCatalogHandler struct {
	CasesChatCatalogHandler
}

func (h *casesChatCatalogHandler) GetCaseChatHistory(ctx context.Context, in *GetCaseChatHistoryRequest, out *ChatMessages) error {
	return h.CasesChatCatalogHandler.GetCaseChatHistory(ctx, in, out)
}
