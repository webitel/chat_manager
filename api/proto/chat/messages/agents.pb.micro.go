// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat/messages/agents.proto

package messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AgentChatService service

func NewAgentChatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "AgentChatService.GetAgentChats",
			Path:    []string{"/agent/chats"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "AgentChatService.MarkChatProcessed",
			Path:    []string{"/agent/chats/{chat_id}"},
			Method:  []string{"PATCH"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for AgentChatService service

type AgentChatService interface {
	GetAgentChats(ctx context.Context, in *GetAgentChatsRequest, opts ...client.CallOption) (*GetAgentChatsResponse, error)
	MarkChatProcessed(ctx context.Context, in *MarkChatProcessedRequest, opts ...client.CallOption) (*MarkChatProcessedResponse, error)
}

type agentChatService struct {
	c    client.Client
	name string
}

func NewAgentChatService(name string, c client.Client) AgentChatService {
	return &agentChatService{
		c:    c,
		name: name,
	}
}

func (c *agentChatService) GetAgentChats(ctx context.Context, in *GetAgentChatsRequest, opts ...client.CallOption) (*GetAgentChatsResponse, error) {
	req := c.c.NewRequest(c.name, "AgentChatService.GetAgentChats", in)
	out := new(GetAgentChatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentChatService) MarkChatProcessed(ctx context.Context, in *MarkChatProcessedRequest, opts ...client.CallOption) (*MarkChatProcessedResponse, error) {
	req := c.c.NewRequest(c.name, "AgentChatService.MarkChatProcessed", in)
	out := new(MarkChatProcessedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgentChatService service

type AgentChatServiceHandler interface {
	GetAgentChats(context.Context, *GetAgentChatsRequest, *GetAgentChatsResponse) error
	MarkChatProcessed(context.Context, *MarkChatProcessedRequest, *MarkChatProcessedResponse) error
}

func RegisterAgentChatServiceHandler(s server.Server, hdlr AgentChatServiceHandler, opts ...server.HandlerOption) error {
	type agentChatService interface {
		GetAgentChats(ctx context.Context, in *GetAgentChatsRequest, out *GetAgentChatsResponse) error
		MarkChatProcessed(ctx context.Context, in *MarkChatProcessedRequest, out *MarkChatProcessedResponse) error
	}
	type AgentChatService struct {
		agentChatService
	}
	h := &agentChatServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AgentChatService.GetAgentChats",
		Path:    []string{"/agent/chats"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AgentChatService.MarkChatProcessed",
		Path:    []string{"/agent/chats/{chat_id}"},
		Method:  []string{"PATCH"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&AgentChatService{h}, opts...))
}

type agentChatServiceHandler struct {
	AgentChatServiceHandler
}

func (h *agentChatServiceHandler) GetAgentChats(ctx context.Context, in *GetAgentChatsRequest, out *GetAgentChatsResponse) error {
	return h.AgentChatServiceHandler.GetAgentChats(ctx, in, out)
}

func (h *agentChatServiceHandler) MarkChatProcessed(ctx context.Context, in *MarkChatProcessedRequest, out *MarkChatProcessedResponse) error {
	return h.AgentChatServiceHandler.MarkChatProcessed(ctx, in, out)
}
