// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bot.proto

package webitel_chat_bot

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/matvoy/chat_server/api/proto/chat"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BotService service

func NewBotServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BotService service

type BotService interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error)
	AddProfile(ctx context.Context, in *AddProfileRequest, opts ...client.CallOption) (*AddProfileResponse, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...client.CallOption) (*DeleteProfileResponse, error)
}

type botService struct {
	c    client.Client
	name string
}

func NewBotService(name string, c client.Client) BotService {
	return &botService{
		c:    c,
		name: name,
	}
}

func (c *botService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error) {
	req := c.c.NewRequest(c.name, "BotService.SendMessage", in)
	out := new(SendMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botService) AddProfile(ctx context.Context, in *AddProfileRequest, opts ...client.CallOption) (*AddProfileResponse, error) {
	req := c.c.NewRequest(c.name, "BotService.AddProfile", in)
	out := new(AddProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botService) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...client.CallOption) (*DeleteProfileResponse, error) {
	req := c.c.NewRequest(c.name, "BotService.DeleteProfile", in)
	out := new(DeleteProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotService service

type BotServiceHandler interface {
	SendMessage(context.Context, *SendMessageRequest, *SendMessageResponse) error
	AddProfile(context.Context, *AddProfileRequest, *AddProfileResponse) error
	DeleteProfile(context.Context, *DeleteProfileRequest, *DeleteProfileResponse) error
}

func RegisterBotServiceHandler(s server.Server, hdlr BotServiceHandler, opts ...server.HandlerOption) error {
	type botService interface {
		SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error
		AddProfile(ctx context.Context, in *AddProfileRequest, out *AddProfileResponse) error
		DeleteProfile(ctx context.Context, in *DeleteProfileRequest, out *DeleteProfileResponse) error
	}
	type BotService struct {
		botService
	}
	h := &botServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BotService{h}, opts...))
}

type botServiceHandler struct {
	BotServiceHandler
}

func (h *botServiceHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error {
	return h.BotServiceHandler.SendMessage(ctx, in, out)
}

func (h *botServiceHandler) AddProfile(ctx context.Context, in *AddProfileRequest, out *AddProfileResponse) error {
	return h.BotServiceHandler.AddProfile(ctx, in, out)
}

func (h *botServiceHandler) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, out *DeleteProfileResponse) error {
	return h.BotServiceHandler.DeleteProfile(ctx, in, out)
}
