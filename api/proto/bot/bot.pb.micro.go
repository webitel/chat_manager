// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bot.proto

package bot

import (
	fmt "fmt"
	chat "github.com/webitel/chat_manager/api/proto/chat"
	_ "google.golang.org/genproto/googleapis/rpc/status"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Bots service

func NewBotsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Bots service

type BotsService interface {
	// SendMessage [FROM] bot's profile [TO] external client communication
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error)
	// Create new bot profile
	CreateBot(ctx context.Context, in *Bot, opts ...client.CallOption) (*Bot, error)
	// Select returns a single bot profile by unique identifier
	SelectBot(ctx context.Context, in *SelectBotRequest, opts ...client.CallOption) (*Bot, error)
	// Update single bot
	UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...client.CallOption) (*Bot, error)
	// Delete bot(s) selection
	DeleteBot(ctx context.Context, in *SearchBotRequest, opts ...client.CallOption) (*SearchBotResponse, error)
	// Search returns list of bots, posibly filtered out with search conditions
	SearchBot(ctx context.Context, in *SearchBotRequest, opts ...client.CallOption) (*SearchBotResponse, error)
	// Sends user action event to a conversation partner.
	SendUserAction(ctx context.Context, in *SendUserActionRequest, opts ...client.CallOption) (*chat.SendUserActionResponse, error)
	// Broadcast message `from` given bot profile to `peer` recipient(s)
	BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, opts ...client.CallOption) (*BroadcastMessageResponse, error)
}

type botsService struct {
	c    client.Client
	name string
}

func NewBotsService(name string, c client.Client) BotsService {
	return &botsService{
		c:    c,
		name: name,
	}
}

func (c *botsService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error) {
	req := c.c.NewRequest(c.name, "Bots.SendMessage", in)
	out := new(SendMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsService) CreateBot(ctx context.Context, in *Bot, opts ...client.CallOption) (*Bot, error) {
	req := c.c.NewRequest(c.name, "Bots.CreateBot", in)
	out := new(Bot)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsService) SelectBot(ctx context.Context, in *SelectBotRequest, opts ...client.CallOption) (*Bot, error) {
	req := c.c.NewRequest(c.name, "Bots.SelectBot", in)
	out := new(Bot)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsService) UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...client.CallOption) (*Bot, error) {
	req := c.c.NewRequest(c.name, "Bots.UpdateBot", in)
	out := new(Bot)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsService) DeleteBot(ctx context.Context, in *SearchBotRequest, opts ...client.CallOption) (*SearchBotResponse, error) {
	req := c.c.NewRequest(c.name, "Bots.DeleteBot", in)
	out := new(SearchBotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsService) SearchBot(ctx context.Context, in *SearchBotRequest, opts ...client.CallOption) (*SearchBotResponse, error) {
	req := c.c.NewRequest(c.name, "Bots.SearchBot", in)
	out := new(SearchBotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsService) SendUserAction(ctx context.Context, in *SendUserActionRequest, opts ...client.CallOption) (*chat.SendUserActionResponse, error) {
	req := c.c.NewRequest(c.name, "Bots.SendUserAction", in)
	out := new(chat.SendUserActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsService) BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, opts ...client.CallOption) (*BroadcastMessageResponse, error) {
	req := c.c.NewRequest(c.name, "Bots.BroadcastMessage", in)
	out := new(BroadcastMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bots service

type BotsHandler interface {
	// SendMessage [FROM] bot's profile [TO] external client communication
	SendMessage(context.Context, *SendMessageRequest, *SendMessageResponse) error
	// Create new bot profile
	CreateBot(context.Context, *Bot, *Bot) error
	// Select returns a single bot profile by unique identifier
	SelectBot(context.Context, *SelectBotRequest, *Bot) error
	// Update single bot
	UpdateBot(context.Context, *UpdateBotRequest, *Bot) error
	// Delete bot(s) selection
	DeleteBot(context.Context, *SearchBotRequest, *SearchBotResponse) error
	// Search returns list of bots, posibly filtered out with search conditions
	SearchBot(context.Context, *SearchBotRequest, *SearchBotResponse) error
	// Sends user action event to a conversation partner.
	SendUserAction(context.Context, *SendUserActionRequest, *chat.SendUserActionResponse) error
	// Broadcast message `from` given bot profile to `peer` recipient(s)
	BroadcastMessage(context.Context, *BroadcastMessageRequest, *BroadcastMessageResponse) error
}

func RegisterBotsHandler(s server.Server, hdlr BotsHandler, opts ...server.HandlerOption) error {
	type bots interface {
		SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error
		CreateBot(ctx context.Context, in *Bot, out *Bot) error
		SelectBot(ctx context.Context, in *SelectBotRequest, out *Bot) error
		UpdateBot(ctx context.Context, in *UpdateBotRequest, out *Bot) error
		DeleteBot(ctx context.Context, in *SearchBotRequest, out *SearchBotResponse) error
		SearchBot(ctx context.Context, in *SearchBotRequest, out *SearchBotResponse) error
		SendUserAction(ctx context.Context, in *SendUserActionRequest, out *chat.SendUserActionResponse) error
		BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, out *BroadcastMessageResponse) error
	}
	type Bots struct {
		bots
	}
	h := &botsHandler{hdlr}
	return s.Handle(s.NewHandler(&Bots{h}, opts...))
}

type botsHandler struct {
	BotsHandler
}

func (h *botsHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error {
	return h.BotsHandler.SendMessage(ctx, in, out)
}

func (h *botsHandler) CreateBot(ctx context.Context, in *Bot, out *Bot) error {
	return h.BotsHandler.CreateBot(ctx, in, out)
}

func (h *botsHandler) SelectBot(ctx context.Context, in *SelectBotRequest, out *Bot) error {
	return h.BotsHandler.SelectBot(ctx, in, out)
}

func (h *botsHandler) UpdateBot(ctx context.Context, in *UpdateBotRequest, out *Bot) error {
	return h.BotsHandler.UpdateBot(ctx, in, out)
}

func (h *botsHandler) DeleteBot(ctx context.Context, in *SearchBotRequest, out *SearchBotResponse) error {
	return h.BotsHandler.DeleteBot(ctx, in, out)
}

func (h *botsHandler) SearchBot(ctx context.Context, in *SearchBotRequest, out *SearchBotResponse) error {
	return h.BotsHandler.SearchBot(ctx, in, out)
}

func (h *botsHandler) SendUserAction(ctx context.Context, in *SendUserActionRequest, out *chat.SendUserActionResponse) error {
	return h.BotsHandler.SendUserAction(ctx, in, out)
}

func (h *botsHandler) BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, out *BroadcastMessageResponse) error {
	return h.BotsHandler.BroadcastMessage(ctx, in, out)
}
