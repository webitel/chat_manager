syntax = "proto3";

package webitel.chat.server; 

option go_package = "github.com/webitel/chat_manager/api/proto/chat";

// message Error {

//     string id = 1;
//     string message = 2;
// }

// Account contact info to extend and replace legacy chat.Client message type
message Account {
    // Unique IDentifier
    int64  id = 1;
    // Channel communication type
    string channel = 2; // e.g.: bot, user, phone, telegram, facebook, viber, skype ...
    // Channel specific contact string
    string contact = 3; // optional: channel specific contact string

    string first_name = 4; // optional
    string last_name = 5; // optional
    string username = 6; // required
}

message Message {
    // Unique message identifier inside this chat
    int64 id = 1;
    // Type of this Message to notify e.g.: text, file, read, status etc.
    string type = 2;
    // Text of the message to be sent, 1-4096
    string text = 3;
    // File to send. Pass an HTTP .URL as a string for Webitel to get a file from the Internet,
    // or upload a new one using storage.FileService.UploadFile()
    File file = 4;
    // Optional. This Message extra properties
    map<string, string> variables = 5;
    // End-User extra contact info
    Account contact = 7;

    // Optional. Send message date (epochtime ms) Generates by the service.
    int64 created_at = 8;
    // Optional. Edit message date (epochtime ms) Generates by the service.
    // For "read" messages, you can specify the date the last READ message was created_at
    int64 updated_at = 9;
    // Optional. If the message is a reply,
    // this is the ID of the original message
    int64 reply_to_message_id = 10;
    // External message sent-binding to be able to identify corresponding internal message
    map<string,string> reply_to_variables = 11;
    // Unique identifier for the chat where the original message was sent
    string forward_from_chat_id = 12;
    // Message identifier in the chat specified in from_chat_id
    int64 forward_from_message_id = 13;
    // External message sent-binding to be able to identify corresponding internal message
    map<string,string> forward_from_variables = 14;
    // Reply Markup Buttons SET
    repeated Buttons buttons = 6;
    // Inline Keyboard Buttons SET
    repeated Buttons inline = 15;
    // From sender user account
    Account from = 16;
    // Postback. Reply Button Click[ed].
    Postback postback = 17;
    // An option used to block input to force the user
    // to respond with one of the `Buttons`.
    // Instructs client agents to disable input capabilities.
    // Can only be used with a set of `Buttons`.
    bool no_input = 18;

    // NewChatMembers description for {"type":"joined"} notification
    repeated Account new_chat_members = 20;
    // LeftChatMember description for {"type":"left"} notification
    Account left_chat_member = 21;
}

message File {

    int64 id = 1;
    string url = 2;
    string mime = 3;

    string name = 4;
    int64 size = 5;

    string source = 6;
}

message Buttons {

    repeated Button button = 1;
}

message Button {

    string caption  = 1;
    string text = 2;
    string type = 3;
    string url = 4;
    string code = 5;
}

// message Contact {

//     string phone_number  = 1;
// }

// Postback. Reply Button Click[ed].
message Postback {
    // Message ID of the button.
    int64 mid = 1;
    // Button's callback data associated.
    string code = 2;
    // Button's caption. Text to display.
    string text = 3;
}