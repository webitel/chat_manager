syntax = "proto3";

package webitel.chat.server;

option go_package = "github.com/webitel/chat_manager/api/proto/chat";

import "message.proto";
import "google/rpc/status.proto";

service Messages {
  // Sends a current user action event to a conversation partners.
  rpc SendUserAction(SendUserActionRequest) returns (SendUserActionResponse) {}
  // Broadcast message `from` given bot profile to `peer` recipient(s)
  rpc BroadcastMessage(BroadcastMessageRequest) returns (BroadcastMessageResponse) {}
}

// User actions. Use this to provide users with detailed info
// about their chat partner's actions: typing or sending attachments of all kinds.
// Design from: https://core.telegram.org/type/SendMessageAction
enum UserAction {
  // User is typing.
  Typing = 0;
  // Invalidate all previous action updates.
  // E.g. when user deletes entered text or aborts a video upload.
  Cancel	= 1;

  reserved 2 to 17;
  // // User is recording a video.
  // RecordVideoAction = 2;
  // // User is uploading a video.
  // sendMessageUploadVideoAction = 3;
  // // User is recording a voice message.
  // sendMessageRecordAudioAction = 4;
  // // User is uploading a voice message.
  // sendMessageUploadAudioAction = 5;
  // // User is uploading a photo.
  // sendMessageUploadPhotoAction = 6;
  // // User is uploading a file.
  // sendMessageUploadDocumentAction = 7;
  // // User is selecting a location to share.
  // sendMessageGeoLocationAction = 8;
  // // User is selecting a contact to share.
  // sendMessageChooseContactAction = 9;
  // // User is playing a game
  // sendMessageGamePlayAction = 10;
  // // User is recording a round video to share
  // sendMessageRecordRoundAction = 11;
  // // User is uploading a round video
  // sendMessageUploadRoundAction = 12;
  // // User is currently speaking in the group call
  // speakingInGroupCallAction = 13;
  // // Chat history is being imported
  // sendMessageHistoryImportAction = 14;
  // // User is choosing a sticker
  // sendMessageChooseStickerAction = 15;
  // // User has clicked on an animated emoji triggering a reaction, click here for more info ».
  // sendMessageEmojiInteraction = 16;
  // // User is watching an animated emoji reaction triggered by another user, click here for more info ».
  // sendMessageEmojiInteractionSeen = 17;
}

message SendUserActionRequest {
  // [FROM] Sender peer channel id.
  string channel_id = 1;
  // Type of action.
  UserAction action = 2;

  // [TO] partner identification ..
  reserved 3, 4;
}

message SendUserActionResponse {
  // Affected ?
  bool ok = 1;
}

message BroadcastMessageRequest {
  // REQUIRED. Message content (accept: text) to broadcast
  webitel.chat.server.Message message = 1;
  // REQUIRED. From sender bot unique profile.id
  int64 from = 2;
  // REQUIRED. List of recipients; `from` provider-specific, e.g.:
  // telegram - user.id (int64) which contacted the `from` bot.
  // gotd - phone numbers according to the E.164 standard
  repeated string peer = 3;
  //
  int64 timeout = 4;
}

// Broadcast recepient status
message BroadcastPeer {
  // Peer identification
  string peer = 1;
  // Broadcast peer status
  google.rpc.Status error = 2;
}

message BroadcastMessageResponse {
  repeated BroadcastPeer failure = 1;
  map<string, string> variables = 2;
}