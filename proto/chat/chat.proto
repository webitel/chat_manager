syntax = "proto3";

package webitel.chat.server; 

option go_package = "github.com/webitel/chat_manager/api/proto/chat";

import "message.proto";

service ChatService {
  // SendMessage [FROM] created channel_id (+auth_user_id) [TO] conversation_id chat-room
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
  // StartConversation starts bot's (.user.type:.user.connection) flow schema NEW routine
  rpc StartConversation(StartConversationRequest) returns (StartConversationResponse) {}
  // CloseConversation stops and close chat-bot's schema routine with all it's recipient(s)
  rpc CloseConversation(CloseConversationRequest) returns (CloseConversationResponse) {}
  // JoinConversation accepts user's invitation to chat conversation
  rpc JoinConversation(JoinConversationRequest) returns (JoinConversationResponse) {}
  // LeaveConversation kicks requested user from chat conversation
  rpc LeaveConversation(LeaveConversationRequest) returns (LeaveConversationResponse) {}
  // InviteToConversation publish NEW invitation for .user
  rpc InviteToConversation(InviteToConversationRequest) returns (InviteToConversationResponse) {}
  // DeclineInvitation declines chat invitation FROM user
  rpc DeclineInvitation(DeclineInvitationRequest) returns (DeclineInvitationResponse) {}
  // DeleteMessage by unique `id` or `variables` as external binding(s)
  rpc DeleteMessage(DeleteMessageRequest) returns (HistoryMessage) {} // (DeleteMessageResponse) {}
  // CheckSession returns internal chat channel for external chat user
  rpc CheckSession(CheckSessionRequest) returns (CheckSessionResponse) {}
  rpc WaitMessage(WaitMessageRequest) returns (WaitMessageResponse) {}
  rpc UpdateChannel(UpdateChannelRequest) returns (UpdateChannelResponse) {}
  rpc GetChannelByPeer(GetChannelByPeerRequest) returns (Channel) {}

  rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse) {}
  rpc GetConversationByID(GetConversationByIDRequest) returns (GetConversationByIDResponse) {}
  rpc GetHistoryMessages(GetHistoryMessagesRequest) returns (GetHistoryMessagesResponse) {}

  // [WTEL-4695] crutch
  rpc SaveAgentJoinMessage(SaveAgentJoinMessageRequest) returns (SaveAgentJoinMessageResponse) {}

  // API /v1
  rpc SetVariables(SetVariablesRequest) returns (ChatVariablesResponse) {}
  rpc BlindTransfer(ChatTransferRequest) returns (ChatTransferResponse) {}
}

message Profile {
  int64 id = 1;
  string url_id = 2;
  string name = 3;
  string type = 4;
  int64 domain_id = 5;
  int64 schema_id = 6;
  map<string, string>  variables = 7;
}

message Conversation {
  string id = 1;
  string title = 2;
  int64 created_at = 3;
  int64 closed_at = 4;
  int64 updated_at = 5;
  int64 domain_id = 6;
  repeated Member members = 7;
  repeated HistoryMessage messages = 8;
//  string self_channel_id = 9;
//  int32 unread_messages = 10;
}

message GetChannelByPeerRequest {
  string peer_id = 1;
  int64 from_id = 2;
}

message Member {
  string channel_id = 1;
  int64 user_id = 2;
  string type = 3;
  string username = 4;
  bool internal = 5;
  int64 updated_at = 6;
  // string firstname = 6;
  // string lastname = 7;
  string external_id = 8;
  Gateway via = 9;
}

message Gateway {
  int64 id = 1;
  string type = 2;
  string name = 3;
}

message Channel {
  string id = 1;
  string type = 2;
  int64 created_at = 3;
  int64 closed_at = 4;
  bool internal = 5;
  int64 domain_id = 6;
  string connection = 7;
  int64 user_id = 8;
  string props = 9;
}

message User {
  int64 user_id = 1;
  string type = 2;
  string connection = 3;
  bool internal = 4;
}

message UpdateChannelRequest {
  // Chat channel FROM unique identifier
  string channel_id = 1;
  int64 auth_user_id = 2;
  // You may specify date which will implies messages partial READ,
  // until last seen message.created_at date, OR leave it blank that
  // implies READ ALL messages operation (until this request timestamp)
  int64 read_until = 3;
}

message UpdateChannelResponse {}


message SaveAgentJoinMessageRequest {
  Message message = 1;
  string receiver = 2;
}

message SaveAgentJoinMessageResponse {
}

message HistoryMessage {
  int64 id = 1;
  string channel_id = 2;
  // int64 conversation_id = 3;
  // // int64 from_user_id = 2;
  // // string from_user_type = 3;
  string type = 5;
  string text = 4;
  File   file = 8;

  int64 created_at = 6;
  int64 updated_at = 7;
  
  // int64 reply_to_message_id = 10;
  // string forward_from_chat_id = 12;
  // int64 forward_from_message_id = 13;
}

message WaitMessageRequest {
  string conversation_id = 1;
  string confirmation_id = 2;
}

message WaitMessageResponse {
  int64 timeout_sec = 1;
  repeated Message messages = 2;
  //Error error = 3;
}

message CheckSessionRequest {
  string external_id = 1;
  int64 profile_id = 2;
  string username = 3;
  string type = 4;
}

message CheckSessionResponse {

  bool exists = 1;
  string channel_id = 2;
  int64 client_id = 3;
  // Account for .this chat channel, end-user contact info
  Account account = 4;
  // Properties defined in .StartConversationRequest.message.variables
  map<string,string> properties = 5; // optional: extra context
}

message SendMessageRequest {
  // User from = 1;
  Message message = 1;
  // Sender chat unique id
  string channel_id = 2;
  //  bool from_flow = 3;

  // Target chat unique id
  string conversation_id = 3;
  int64 auth_user_id = 4;
  // // Edit message operation indication !
  // bool edit = 5; // == (0 != .message.updated_at)
}

message SendMessageResponse {
    // Message sent !
    Message message = 1;
}

message StartConversationRequest {
  // FROM: client (contact)
  User user = 1;
  int64 domain_id = 2;
  string username = 3;
  // Message to start conversation with ...
  Message message = 4;
  // Properties (variables) to start conversation chat@bot channel with ...
  map<string,string> properties = 5;
}

message StartConversationResponse {
  string conversation_id = 1;
  string channel_id = 2;
  // Sent "start" message !
  Message message = 3;
}

message CloseConversationRequest {
  string conversation_id = 1; // required
  string closer_channel_id = 2;
  //  bool from_flow = 3;
  CloseConversationCause cause = 3;
  int64 auth_user_id = 4;
}

enum CloseConversationCause {
  no_cause = 0; // optional (no cause)
  flow_end = 1;
  client_leave = 2;
  flow_err = 3;
  broadcast_end = 4;
}

message CloseConversationResponse {
}

// Accept Invitation !
message JoinConversationRequest {
  string invite_id = 1;
  int64 auth_user_id = 2;
  // User user = 1;
  // int64 conversation_id = 2;
}

message JoinConversationResponse {
  string channel_id = 1;
}

message LeaveConversationRequest {
  string channel_id = 1;
  string conversation_id = 2;
  int64 auth_user_id = 3;
  LeaveConversationCause cause = 4;
}

enum LeaveConversationCause {
  default_cause = 0; // optional (no cause)
  agent_timeout = 1;
  client_timeout = 2;
  agent_leave = 3;
  transfer = 4;
  silence_timeout = 5;
}

message LeaveConversationResponse {
}

message InviteToConversationRequest {

    User user = 1;                    // invite: .user.*
    string conversation_id = 2;       // TO: chat
    string inviter_channel_id = 3;    // FROM: chat
    int64 timeout_sec = 4;            // invite: timeout
    int64 domain_id = 5;              // invite: .user.domain
    int64 auth_user_id = 6;           // FROM: user.id
    //  bool from_flow = 7;
    string title = 7;                 // invite: chat title
    string app_id = 8;                // ???
  
    map<string,string> variables = 9; // invite: chat metadata
}

message InviteToConversationResponse {
  string invite_id = 1;
}

message DeclineInvitationRequest {
  string invite_id = 1;
  int64 auth_user_id = 2;
  string conversation_id = 3;
  string cause = 4; // optional: reason
}

message DeclineInvitationResponse {
}

message DeleteMessageRequest {
  // Unique message id to lookup
  int64 id = 1;
  // Veriables to lookup message external binding(s)
  map<string,string> variables = 2;
  
  // --- Authentication ---

  // Sender chat unique id
  string channel_id = 5;
  // Dialog (Conversation) unique id
  string conversation_id = 6;
  // Sender user (Owner).
  int64 auth_user_id = 7;
}

message DeleteMessageResponse {
  repeated int64 id = 1;
}

message GetConversationsRequest {
  // ----- Base Filters ---------------------------
  string id = 1;
  // ----- Object-Specific Filters ------------------
  int64 domain_id = 3;
  int64 user_id = 4;
  bool active = 5;
  // ----- Search Options -------------------------
  repeated string fields = 6; // select: output (fields,...)
  repeated string sort = 7;   // select: order by (fields,...)
  int32 page = 8;             // select: offset {page}
  int32 size = 9;             // select: limit {size}
  int32 message_size = 10;
}

message GetConversationsResponse {
  int32 page = 1; // select: offset {page}
  bool next = 2; // search: has {next} page ?
  repeated Conversation items = 3;
}

message GetConversationByIDRequest {
  string id = 1;
}
  
message GetConversationByIDResponse {
  Conversation item = 1;
}

message GetHistoryMessagesRequest {
  // ----- Base Filters ---------------------------
  int64 id = 1;
  // ----- Object-Specific Filters ------------------
  string conversation_id = 2;
  // ----- Search Options -------------------------
  repeated string fields = 4; // select: output (fields,...)
  repeated string sort = 5;   // select: order by (fields,...)
  int32 page = 6;             // select: offset {page}
  int32 size = 7;             // select: limit {size}
}

message GetHistoryMessagesResponse {
  int32 page = 1; // select: offset {page}
  bool next = 2; // search: has {next} page ?
  repeated HistoryMessage items = 3;
}


// message StatusMessageRequest {

//     // Status text, e.g: uploading, typing etc.
//     string status = 1;
//     // Expires for temporary (short time lived) status messages in seconds
//     int64 expires = 2;
// }

// message SendMessageRequest {

//     // Text of the message to be sent, 1-4096
//     string text = 1;
//     // File to send. Pass an HTTP .URL as a string for Webitel to get a file from the Internet,
//     // or upload a new one using storage.FileService.UploadFile()
//     File file = 2;
//     // If the message is a reply, ID of the original message
//     int64 reply_to_message_id = 3;
//     // Pass True, if the message should be sent even if the specified replied-to message is not found
//     bool allow_sending_without_reply = 4;
// }

// message ForwardMessageRequest {

//     // Unique identifier for the chat where the original message was sent
//     string from_chat_id = 1;
//     // Message identifier in the chat specified in from_chat_id
//     int64 from_message_id = 2;
// }


message SetVariablesRequest {
    // Required. Chat channel unique IDentifier
    // to which .variables must be attached.
    // Accept `channel_id` or `conversation_id`.
    string channel_id = 1;
    // Required. Variables to be merged.
    // NOTE: Empty value(s) implies unset(remove) key action
    map<string,string> variables = 2;
}

message ChatVariablesResponse {
    // Unique Chat Channel IDentifier.
    string channel_id = 1;
    // Result Chat Channel's Variables SET.
    map<string,string> variables = 2;
}

message ChatTransferRequest {
    // ConversationID of chat@flow channel
    // currently controlling the session
    string conversation_id = 1;
    // Optional. [FROM] Joined channel (member)
    // originator of the transfer operation
    // Implies the conversation_id if omitted
    string channel_id = 2;

    // Required. [TO] Flow schema unique ID,
    // to which a conversation must be transfered
    int64 schema_id = 3;
    int64 user_id = 5;
    // Optional. Origination Variables to be chained (merged)
    map<string,string> variables = 4;
}

message ChatTransferResponse {
    
}