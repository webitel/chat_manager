syntax = "proto3";

package webitel.portal;

option go_package = "webitel.go/api/portal;portal";

import "google/protobuf/wrappers.proto";

import "chat/messages/peer.proto";
import "chat/messages/chat.proto";
import "chat/messages/message.proto";
import "chat/messages/history.proto";
import "chat/messages/broadcast.proto";

// Customer Messaging Service
service ChatMessagesService {
  // Returns the current user dialogs list.
  rpc ChatDialogs(ChatDialogsRequest) returns (ChatList); // (webitel.chat.ChatDialogs);

  // rpc UploadMedia(UploadMediaRequest) returns (stream MediaFile);

  // Sends a message to the chat.
  rpc SendMessage(SendMessageRequest) returns (UpdateNewMessage);

  // Marks message history as read.
  rpc ReadHistory(ReadHistoryRequest) returns (UpdateReadHistoryInbox); // AffectedMessages

  // Returns the conversation history with one interlocutor / within a chat.
  // Posible peer( type: string! ):
  // * "chat" ; A separate dialog from general correspondence with the interlocutor
  // * "user" ; Linked dialogs of general correspondence with the contact. Not implemented.
  // * <none> ; Points [TO] the default portal service (bot) chat dialog.
  rpc ChatHistory(webitel.chat.ChatMessagesRequest) returns (webitel.chat.ChatMessages);

  // Returns the chat (peer) history updates (difference) since offset (state).
  rpc ChatUpdates(webitel.chat.ChatMessagesRequest) returns (webitel.chat.ChatMessages);

  // Broadcast message `from` given bot profile to `peer` recipient(s)
  rpc BroadcastMessage(webitel.chat.BroadcastMessageRequest) returns (webitel.chat.BroadcastMessageResponse);
}

// Customer end-User messaging account settings
message ChatAccount {
  // User self. The sender. You.
  webitel.chat.Peer user = 1;
}

// Chat info.
// Reflects chat/messages.Chat
message Chat {
  // ID of the chat.
  string id = 2;
  // Timestamp of the last activity in the chat.
  int64 date = 6;
  // OPTIONAL. A non-zero value indicates that
  // the participant has left the chat. CLOSED(!)
  int64 left = 8;
  // OPTIONAL. A non-zero value indicates when
  // the participant joined this chat conversation.
  int64 join = 9;
  // The Interlocutor. Other side.
  webitel.chat.Peer peer = 4;
  // Title of the chat.
  string title = 7;
  // Inbox NEW [unread] message(s) count.
  // ( chat.message.id ~ read.message.id )
  int32 inbox = 1;
  // Top (last) message in this chat.
  webitel.chat.Message message = 10;
}

// 
message ChatDialogsRequest {

  // ----- Output ----- //
  
  // Page number to return. **default**: 1.
  int32 page = 1;
  // Page records limit. **default**: 16.
  int32 size = 2;
  // Search term: peer.name
  string q = 5;
  // Sort records by { fields } specification.
  repeated string sort = 3;
  // Fields [Q]uery to build result dataset record.
  repeated string fields = 4;

  // ------ Args ------ //
  
  // Set of unique chat IDentifier(s).
  // Accept: dialog -or- member ID.
  repeated string id = 6;
  
  // // [VIA] Text gateway.
  // Peer via = 7;
  reserved 7;

  // [PEER] Member of ...
  webitel.chat.Peer peer = 8;
  
  // Date within timerange.
  webitel.chat.Timerange date = 9;
  
  // Dialogs ONLY that are currently [not] active( closed: ? ).
  google.protobuf.BoolValue online = 10;
}

// ChatDialogs dataset
message ChatList {
  // Dataset page of Chat(s).
  repeated Chat data = 1;
  // Page number of results.
  int32 page = 2;
  // Next page available ?
  bool next = 3;
}

// 
message SendMessageRequest {

  // Client associated message id.
  // DEFAULT: Connect.Request.id
  string id = 4;

  // The destination where the message will be sent.
  // - peer{ type:"chat", id: $chat_id }
  // - peer{ type:"user", id: $user_id }
  // Missing peer - points TO the default
  // portal "Service" (bot) chat dialog.
  webitel.chat.Peer peer = 1;

  // Media file uploaded.
  // Not implemented yet.
  webitel.chat.File file = 2;
  
  // Media text message.
  string text = 3;

  // Postback. Quick Reply Button Click[ed].
  webitel.chat.Postback postback = 5;

}

// 
message ReadHistoryRequest {

  // Target chat dialog or user.
  // - peer{ type:"chat", id: $chat_id }
  // - peer{ type:"user", id: $user_id }
  // Missing peer - points TO the default
  // portal service chat Bot dialog.
  webitel.chat.Peer peer = 1;

  // If a positive value is passed,
  // only messages with identifiers
  // less or equal than the given one
  // will be read.
  int64 max_id = 2;
}

// ------------------ Update(s) ------------------ //

enum Disposition {
  Outgoing = 0;
  Incoming = 1;
}

// New message in a chat history.
message UpdateNewMessage {

  // OPTIONAL. Client [send] message id.
  // DEFAULT: Connect.Request.id
  string id = 3;

  // Disposition of the current user.
  Disposition dispo = 1;

  // NEW message details.
  webitel.chat.Message message = 2;
}

// Update about join NEW member(s) to the chat.
message UpdateChatMember {

  // Chat [TO] Update.
  webitel.chat.Chat chat = 1;
  // Join NEW member(s)..
  repeated webitel.chat.Peer join = 2;
}

// Update about that the member left the chat.
message UpdateLeftMember {

  // Chat [TO] Update.
  webitel.chat.Chat chat = 1;
  // The member who left the chat.
  webitel.chat.Peer left = 2;
}

// Update about that the chat dialog is complete.
// NOTE: Next Messages.SendMessage call will open NEW dialog.chat
message UpdateChatComplete {

  // Chat [TO] Update.
  webitel.chat.Chat chat = 1;
  // Side member who closed this chat dialog.
  webitel.chat.Peer from = 2;
}

// Incoming messages were read
message UpdateReadHistoryInbox {

  // Peer chat dialog
  webitel.chat.Peer peer = 1;
  // Maximum ID of messages read
  int64 max_id = 2;
  // Number of messages that are still unread
  int32 inbox = 3;
}

// Outgoing messages were read
// Not Implemented yet !
message UpdateReadHistoryOutbox {

  // Peer chat dialog
  webitel.chat.Peer peer = 1;
  // Maximum ID of read outgoing messages
  int64 max_id = 2;
}

// // Update chat message was edited
// message UpdateMessageEdit {
  
// }

// // Update chat message was deleted
// message UpdateMessageDelete {
  
// }
